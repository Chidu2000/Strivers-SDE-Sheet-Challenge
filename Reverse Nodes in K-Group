Problem link:  https://www.codingninjas.com/codestudio/problems/reverse-nodes-in-k-group_8230709?challengeSlug=striver-sde-challenge&leftPanelTab=1

// LeetCode Hard

#include<bits/stdc++.h>
int calc(Node *head) {
  Node *p = head;
  int l = 0;

  while (p) {
    l++;
    p = p->next;
  }

  return l;
}

Node *reverse(Node *head) {
  Node *p = head, *nxt, *prev = NULL;

  while (p) {
    nxt = p->next;
    p->next = prev;

    prev = p;
    p = nxt;
  }

  return prev;
}

Node *getListAfterReverseOperation(Node *head, int n, int b[]) {
  Node *dummy = new Node(0);
  dummy->next = head;

  Node *p = dummy, *curr, *nxt;

  int len = calc(head);
  for (int i = 0; i < n; i++) {
    if (len == 0)
      break;

    if (b[i] <= len) {
      curr = p->next;
      nxt = curr->next;

      if (b[i] == 0)
        continue;

      for (int j = 0; j < b[i] - 1; j++) {
        curr->next = nxt->next;
        nxt->next = p->next;

        p->next = nxt;
        nxt = curr->next;
      }

      len -= b[i];
      p = curr;
    } else if (len <= b[i]) {
      p->next = reverse(p->next);
      len = 0;
    }
  }

  return dummy->next;
}




//////////////////////////////////////////////////  Another appraoch /////////////////////////////////////////////////////////////////

Node* getListAfterReverseOperation(Node* head, int n, int b[]) {
    Node* current = head;
    Node* next = NULL;
    Node* prev = NULL;
	int count = 0;

    for (int i = 0; i < n; i++) {
        count = 0;

		if(b[i]==0 && n==1){
			return head;
		}
        while (current != NULL && count < b[i]) {
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
            count++;
        }

        if (next != NULL) {
            head->next = getListAfterReverseOperation(next, n - i - 1,&b[i+1]);
            break;
        }
    }
    
    return prev;
}

Note:  It reverse the elements correctly, but fails in appending the unaltered ones to the original array list.
