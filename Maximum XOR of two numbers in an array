Problem link: https://www.codingninjas.com/studio/problems/maximum-xor-of-two-numbers-in-an-array_8230852?challengeSlug=striver-sde-challenge&leftPanelTab=0


#include <bits/stdc++.h> 
int maximumXor(vector<int> A)
{
    int ans(0), mask(0);
    unordered_set<int> st;
    for(int i=31;i>=0;i--){
        mask|=(1<<i);         // sets the i-th bit of the mask to 1. This is done to consider the i-th bit 
        int temp = ans|(1<<i);    //This will be used to check if XORing temp with any number in A produces a valid result.
        for(int j=0;j<A.size();j++){
            int num= A[j] & mask;  // retaining only the bits that are considered so far. This ensures that only the relevant bits are compared during the XOR operation.
            if(st.find(temp^num)!=st.end()){
                ans = temp;     //If it does, it means that XORing temp with num will yield a higher XOR value than the current ans.
                break;
            }
            st.insert(num);
        }
        st.clear();  // the set st is cleared to store the intermediate results for the next bit.
    } 
    return ans;
}
